// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tennis_Statistics.Data;

#nullable disable

namespace Tennis_Statistics.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240930055658_TennisStatsCreate")]
    partial class TennisStatsCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tennis_Statistics.Model.Level", b =>
                {
                    b.Property<int>("LevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LevelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelStars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LevelID");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Match", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("MatchTime")
                        .HasColumnType("time");

                    b.Property<string>("Player1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Player2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResultID")
                        .HasColumnType("int");

                    b.Property<int>("ScorePlayer1")
                        .HasColumnType("int");

                    b.Property<int>("ScorePlayer2")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonID")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WeekID")
                        .HasColumnType("int");

                    b.HasKey("MatchID");

                    b.HasIndex("ResultID");

                    b.HasIndex("SeasonID");

                    b.HasIndex("WeekID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.MatchDetail", b =>
                {
                    b.Property<int>("MatchDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchDetailID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MatchDetailOtherID")
                        .HasColumnType("int");

                    b.Property<int?>("MatchID")
                        .HasColumnType("int");

                    b.Property<int>("ScoreSet1Player1")
                        .HasColumnType("int");

                    b.Property<int>("ScoreSet1Player2")
                        .HasColumnType("int");

                    b.Property<int>("ScoreSet2Player1")
                        .HasColumnType("int");

                    b.Property<int>("ScoreSet2Player2")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreSet3Player1")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreSet3Player2")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreSet4Player1")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreSet4Player2")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreSet5Player1")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreSet5Player2")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MatchDetailID");

                    b.HasIndex("MatchDetailOtherID");

                    b.HasIndex("MatchID");

                    b.ToTable("MatchesDetail");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.MatchDetailOther", b =>
                {
                    b.Property<int>("MatchDetailOtherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchDetailOtherID"));

                    b.Property<int>("AcesPlayer1")
                        .HasColumnType("int");

                    b.Property<int>("AcesPlayer2")
                        .HasColumnType("int");

                    b.Property<int>("AvgFirstServeSpeedPlayer1")
                        .HasColumnType("int");

                    b.Property<int>("AvgFirstServeSpeedPlayer2")
                        .HasColumnType("int");

                    b.Property<int>("AvgSecondServeSpeedPlayer1")
                        .HasColumnType("int");

                    b.Property<int>("AvgSecondServeSpeedPlayer2")
                        .HasColumnType("int");

                    b.Property<string>("BreakPointsWonPlayer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreakPointsWonPlayer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoubleFaultsPlayer1")
                        .HasColumnType("int");

                    b.Property<int>("DoubleFaultsPlayer2")
                        .HasColumnType("int");

                    b.Property<float>("FastestServePlayer1")
                        .HasColumnType("real");

                    b.Property<float>("FastestServePlayer2")
                        .HasColumnType("real");

                    b.Property<float>("FirstServePlayer1")
                        .HasColumnType("real");

                    b.Property<float>("FirstServePlayer2")
                        .HasColumnType("real");

                    b.Property<float>("FirstServeWonPlayer1")
                        .HasColumnType("real");

                    b.Property<float>("FirstServeWonPlayer2")
                        .HasColumnType("real");

                    b.Property<float>("SecondServeWonPlayer1")
                        .HasColumnType("real");

                    b.Property<float>("SecondServeWonPlayer2")
                        .HasColumnType("real");

                    b.Property<int>("UnforcedErrorsPlayer1")
                        .HasColumnType("int");

                    b.Property<int>("UnforcedErrorsPlayer2")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WinnersPlayer1")
                        .HasColumnType("int");

                    b.Property<int>("WinnersPlayer2")
                        .HasColumnType("int");

                    b.HasKey("MatchDetailOtherID");

                    b.ToTable("MatchesDetailOther");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Result", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ResultID");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Season", b =>
                {
                    b.Property<int>("SeasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeasonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SeasonID");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Surface", b =>
                {
                    b.Property<int>("SurfaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurfaceID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SurfaceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SurfaceID");

                    b.ToTable("Surfaces");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Tournaments", b =>
                {
                    b.Property<int>("TournamentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentID"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LevelID")
                        .HasColumnType("int");

                    b.Property<int>("Rounds")
                        .HasColumnType("int");

                    b.Property<int?>("SurfaceID")
                        .HasColumnType("int");

                    b.Property<string>("TournamentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TournamentID");

                    b.HasIndex("LevelID");

                    b.HasIndex("SurfaceID");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Week", b =>
                {
                    b.Property<int>("WeekID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeekID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeasonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WeekID");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Match", b =>
                {
                    b.HasOne("Tennis_Statistics.Model.Result", "Result")
                        .WithMany("Matches")
                        .HasForeignKey("ResultID");

                    b.HasOne("Tennis_Statistics.Model.Season", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonID");

                    b.HasOne("Tennis_Statistics.Model.Week", "Week")
                        .WithMany("Matches")
                        .HasForeignKey("WeekID");

                    b.Navigation("Result");

                    b.Navigation("Season");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.MatchDetail", b =>
                {
                    b.HasOne("Tennis_Statistics.Model.MatchDetailOther", "MatchDetailOther")
                        .WithMany("MatchDetails")
                        .HasForeignKey("MatchDetailOtherID");

                    b.HasOne("Tennis_Statistics.Model.Match", "Match")
                        .WithMany("MatchDetails")
                        .HasForeignKey("MatchID");

                    b.Navigation("Match");

                    b.Navigation("MatchDetailOther");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Tournaments", b =>
                {
                    b.HasOne("Tennis_Statistics.Model.Level", "Level")
                        .WithMany("Tournaments")
                        .HasForeignKey("LevelID");

                    b.HasOne("Tennis_Statistics.Model.Surface", "Surface")
                        .WithMany("Tournaments")
                        .HasForeignKey("SurfaceID");

                    b.Navigation("Level");

                    b.Navigation("Surface");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Level", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Match", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.MatchDetailOther", b =>
                {
                    b.Navigation("MatchDetails");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Result", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Season", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Surface", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Tennis_Statistics.Model.Week", b =>
                {
                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
